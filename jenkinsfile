pipeline {
    agent any

    tools {
        maven "M2_HOME"  // Assurez-vous que "M2_HOME" correspond bien à votre configuration Maven
    }

    stages {
        stage('Récupération du code') {
            steps {
                git branch: 'hamzaa', url: 'https://github.com/hamzahub10/DevOps.git'
            }
        }

        stage('Clean & Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('Create target directory') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Tests Mockito et JUnit') {
            steps {
                sh 'mvn test'
            }
        }

         stage('SonarQube analysis') {
                     steps {
                         sh 'mvn sonar:sonar -Dsonar.login=squ_9425308ed8347caa8f7dfb868acd3a6f53f8e4df'
                     }
                 }

         stage('Déploiement Nexus') {
             steps {
                 sh 'mvn deploy -DskipTests'
             }
         }
/*
         stage('Build image') {
                   steps {
                    sh 'docker build -t tpfoyerdevops .'
                   }
                }

                stage('Deploy Image to DockerHub') {
                   steps {
                 sh 'docker login -u hamzaesprit -p hamza1234.'
                 echo "next"
                 sh 'docker tag tpfoyerdevops hamza/tpfoyerdevops:latest '
                 sh 'docker push hamza/tpfoyerdevops:latest'
                      }
               }
   stage('Deploy with Docker Compose') {
            steps {
                dir('firstpipeline') {
                    sh 'docker compose down'
                    sh " docker compose up -d" //IMAGE_TAG=${IMAGE_TAG}

                }
            }
        }

        stage('Démarrage de Grafana et Prometheus') {
            steps {
                sh 'docker start grafana'
                sh 'docker start prometheus'
            }
        }

        stage('Vérification de Prometheus') {
            steps {
                script {
                    sleep(10)  // Attendre que Prometheus soit prêt
                    sh 'curl -f http://localhost:9090/-/ready || echo "Prometheus is not ready"'
                }
            }
        }

        stage('Vérification de Grafana') {
            steps {
                script {
                    sleep(10)  // Attendre que Grafana soit prêt
                    sh 'curl -f http://localhost:3000/api/health || echo "Grafana is not running"'
                }
            }
        }
    }
    post {
        success {
            slackSend channel: '#devops-notification', color: 'green', message: 'Build success', teamDomain: 'Devops', tokenCredentialId: 'slack-token'
        }
        failure {
            slackSend channel: '#devops-notification', color: 'red', message: 'Build failed', teamDomain: 'Devops', tokenCredentialId: 'slack-token'
        }*/
    }
}